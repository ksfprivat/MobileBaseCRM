package ru.zintur.mobilebase.schema;

import java.util.List;
import ru.zintur.mobilebase.schema.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import ru.zintur.mobilebase.schema.dao.ContactDao;
import ru.zintur.mobilebase.schema.dao.CustomerDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CUSTOMER".
 */
public class Customer {

    private Long id;
    /** Not-null value. */
    private String TitleShort;
    private String TitleFull;
    private String Depart;
    private String Post;
    private String District;
    private String City;
    private String Street;
    private String Building;
    private String Notes;
    private String INN;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CustomerDao myDao;

    private List<Contact> contacts;

    public Customer() {
    }

    public Customer(Long id) {
        this.id = id;
    }

    public Customer(Long id, String TitleShort, String TitleFull, String Depart, String Post, String District, String City, String Street, String Building, String Notes, String INN) {
        this.id = id;
        this.TitleShort = TitleShort;
        this.TitleFull = TitleFull;
        this.Depart = Depart;
        this.Post = Post;
        this.District = District;
        this.City = City;
        this.Street = Street;
        this.Building = Building;
        this.Notes = Notes;
        this.INN = INN;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitleShort() {
        return TitleShort;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitleShort(String TitleShort) {
        this.TitleShort = TitleShort;
    }

    public String getTitleFull() {
        return TitleFull;
    }

    public void setTitleFull(String TitleFull) {
        this.TitleFull = TitleFull;
    }

    public String getDepart() {
        return Depart;
    }

    public void setDepart(String Depart) {
        this.Depart = Depart;
    }

    public String getPost() {
        return Post;
    }

    public void setPost(String Post) {
        this.Post = Post;
    }

    public String getDistrict() {
        return District;
    }

    public void setDistrict(String District) {
        this.District = District;
    }

    public String getCity() {
        return City;
    }

    public void setCity(String City) {
        this.City = City;
    }

    public String getStreet() {
        return Street;
    }

    public void setStreet(String Street) {
        this.Street = Street;
    }

    public String getBuilding() {
        return Building;
    }

    public void setBuilding(String Building) {
        this.Building = Building;
    }

    public String getNotes() {
        return Notes;
    }

    public void setNotes(String Notes) {
        this.Notes = Notes;
    }

    public String getINN() {
        return INN;
    }

    public void setINN(String INN) {
        this.INN = INN;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Contact> getContacts() {
        if (contacts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            List<Contact> contactsNew = targetDao._queryCustomer_Contacts(id);
            synchronized (this) {
                if(contacts == null) {
                    contacts = contactsNew;
                }
            }
        }
        return contacts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetContacts() {
        contacts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
