package ru.zintur.mobilebase.schema.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ru.zintur.mobilebase.schema.domains.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER".
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TitleShort = new Property(1, String.class, "TitleShort", false, "TitleShort");
        public final static Property TitleFull = new Property(2, String.class, "TitleFull", false, "TitleFull");
        public final static Property Depart = new Property(3, String.class, "Depart", false, "Depart");
        public final static Property Post = new Property(4, String.class, "Post", false, "Post");
        public final static Property District = new Property(5, String.class, "District", false, "District");
        public final static Property City = new Property(6, String.class, "City", false, "City");
        public final static Property Street = new Property(7, String.class, "Street", false, "Street");
        public final static Property Building = new Property(8, String.class, "Building", false, "Building");
        public final static Property Notes = new Property(9, String.class, "Notes", false, "Notes");
        public final static Property INN = new Property(10, String.class, "INN", false, "INN");
    };

    private DaoSession daoSession;


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitleShort());
 
        String TitleFull = entity.getTitleFull();
        if (TitleFull != null) {
            stmt.bindString(3, TitleFull);
        }
 
        String Depart = entity.getDepart();
        if (Depart != null) {
            stmt.bindString(4, Depart);
        }
 
        String Post = entity.getPost();
        if (Post != null) {
            stmt.bindString(5, Post);
        }
 
        String District = entity.getDistrict();
        if (District != null) {
            stmt.bindString(6, District);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(7, City);
        }
 
        String Street = entity.getStreet();
        if (Street != null) {
            stmt.bindString(8, Street);
        }
 
        String Building = entity.getBuilding();
        if (Building != null) {
            stmt.bindString(9, Building);
        }
 
        String Notes = entity.getNotes();
        if (Notes != null) {
            stmt.bindString(10, Notes);
        }
 
        String INN = entity.getINN();
        if (INN != null) {
            stmt.bindString(11, INN);
        }
    }

    @Override
    protected void attachEntity(Customer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TitleShort
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TitleFull
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Depart
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Post
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // District
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // City
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Street
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Building
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Notes
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // INN
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitleShort(cursor.getString(offset + 1));
        entity.setTitleFull(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepart(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPost(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDistrict(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStreet(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBuilding(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNotes(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setINN(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
